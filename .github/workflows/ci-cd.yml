name: CI/CD - Tests, Coverage, SonarQube & Docker

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"

jobs:
  frontend-tests:
    name: Tests, Coverage & Sonar Frontend
    runs-on: ubuntu-latest
    steps:
      - name: R√©cup√©rer le code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Installer Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Installer les d√©pendances du front
        run: |
          cd front
          npm install

      - name: Installer Angular CLI
        run: npm install -g @angular/cli

      - name: Lancer les tests Angular avec ChromeHeadless
        run: |
          cd front
          ng test --watch=false --browsers=ChromeHeadless --code-coverage

      - name: Publier le rapport Coverage Frontend
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage-report
          path: front/coverage/

      - name: Analyse SonarQube Frontend
        uses: SonarSource/sonarqube-scan-action@v5
        with:
          projectBaseDir: "front"
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  backend-tests:
    name: Tests, Coverage & Sonar Backend
    runs-on: ubuntu-latest
    steps:
      - name: R√©cup√©rer le code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Installer Java 11 et Maven
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "11"

      - name: üîß Build et Tests Backend avec Jacoco
        run: |
          cd back
          mvn clean verify

      - name: Publier le rapport Jacoco
        uses: actions/upload-artifact@v4
        with:
          name: backend-jacoco-report
          path: back/target/site/jacoco/

      - name: Analyse SonarQube Backend
        run: |
          cd back
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build-and-push-docker:
    name: Build et Push Docker Images
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Connexion √† Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build et push image Backend
        uses: docker/build-push-action@v5
        with:
          context: ./back
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/bobapp-backend:${{ github.run_number }}
            ${{ secrets.DOCKERHUB_USERNAME }}/bobapp-backend:latest

      - name: Build et push image Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./front
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/bobapp-frontend:${{ github.run_number }}
            ${{ secrets.DOCKERHUB_USERNAME }}/bobapp-frontend:latest
